@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

@rendermode InteractiveWebAssembly

<h3>Chat</h3>

@if (IsConnected)
{
    if (currentScreen.Equals("joinScreen"))
    {

    <input type="text" @bind="username" />
    <input type="text" @bind="userCountry" />
    <button @onclick="JoinLobby">Send</button>
    <h3>@joinedLobby</h3>

    <ul id="messagesList">
        @foreach (string message in messages)
        {
            <li>@message</li>
        }


        </ul>
    }
    else if (currentScreen.Equals("waitScreen"))
    {
        <p>waiting for game to begin</p>


    }
    else if (currentScreen.Equals("playScreen"))
    {
        foreach(string keyword in keywords)
        {
            <button @onclick="selectKeyword">@keyword</button>
        }

    }
    else if (currentScreen.Equals("scoreScreen"))
    {



    }
    else
    {
        //this is only reached if an error has occured    
    
    
    }

}
else
{
    <span>Connecting. . . </span>

}

@code {
    private string currentScreen = "joinScreen";
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string username;
    private string userCountry;
    private bool joinedLobby = false;

    private string[]? keywords;


    protected override async Task OnInitializedAsync()
    {
        keywords = new string[8];
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/playerhub"))
        .Build();



        hubConnection.On<string>("LobbyJoined", username =>
        {
            if (username.Equals("Could not resolve playerDataServices"))
                currentScreen = "Error";

            currentScreen = "waitScreen";
            messages.Add(username);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string[]>("RecieveAnswerOptions", answers =>
        {
            for (int i = 0; i < 8; i++)
            {
                keywords[i] = answers[i];             
            }

            currentScreen = "playScreen";
            InvokeAsync(StateHasChanged);

        });

        await hubConnection.StartAsync();
    }

    Task Send() => hubConnection.SendAsync("JoinLobby", username, userCountry);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private void JoinLobby()
    {
        hubConnection.SendAsync("JoinLobby", username, userCountry);
    }

    private void selectKeyword()
    {
        
    
    }
}

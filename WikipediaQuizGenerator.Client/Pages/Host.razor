@page "/host"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net
@using System.Net.NetworkInformation
@using System.Net.Sockets
@using System.Drawing;
@using System.IO;
@inject NavigationManager NavigationManager

@rendermode InteractiveWebAssembly

<script>
    async function getHostIpAddress() {
        const response = await fetch('https://api.ipify.org?format=json');
        const data = await response.json();
        return data.ip;
    }
</script>




@if (IsConnected)
{
    <div class="background-gradient"></div>
    if (currentScreen.Equals("hostScreen"))
    {
        <div class="screen host-screen">
            <img src=@qrCodePath alt="QR Code Join Link"/>
            <div class="player-list-display">

            @foreach (string player in players)
            {
                <ul>@player</ul>
            }
            </div>

            <div class="start-button-container">
                
                @if (pageTitle != null)
                {
                    <button @onclick="StartGame">Start Game</button>
                    <button @onclick="OpenOptions">Options</button>
                }
            </div>



        </div>
    }
    else if (currentScreen.Equals("optionsScreen"))
    {
        <div class="screen options-screen">
            <div class="options"> 
                <div class="options-column" id="'left-options'">

                    <p>QR Code Link</p>
                    <div>
                        <input type="text" @bind=httpAddress />
                        <button @onclick="GenerateNewQRCode">Generate QR Code</button>
                    </div>

                    <div id="wikipedia-article-entry">
                        <p>Wikipedia Articles</p>
                        <textarea id="wikipedia-text-entry" type="text" tabindex="wikipediaUrlLinks"> </textarea>

                    </div>

                </div>

                <div class="options-column" id="right-options">

                    <div>
                        <p>End On Score: </p>
                        <input type="checkbox" @bind="endOnScore" />
                    </div>
                    @if (endOnScore)
                    {
                        <div>
                            <p>Score To Win:</p>
                            <input type="number" @bind="scoreToWin" />
                        </div>
                    }
                    else
                    {
                        <div>
                            <p>Number of Questions:</p>
                            <input type="number" @bind="totalQuestions" />
                        </div>
                    }
                    <div>
                        <p>Questions Per Page:</p>
                        <input type="number" @bind="questionsPerPage" />
                    </div>

                    <div>
                        <p>Auto Proceed After All Players Answer</p>
                        <input type="number" @bind="autoCountdownTime" />
                    </div>

                </div>

            </div>

            <button @onclick="ShowLobby">Return to Lobby</button>
        </div>
    }
    else if (currentScreen.Equals("questionScreen"))
    {
        <div class="screen question-screen">
            <div class="header host-top-bar">
                <p>Current Page: @pageTitle</p>
                <p>Question #: @currentQuestionNumber</p>
            </div>
            <div class="question-box">
                <p>@formattedQuestion</p>
            </div>
            <button @onclick="ShowAnswer">Show Answer</button>
            <div class="footer question-footer">
                <div class="submitted-answer-counter">
                    <p>Submitted Questions</p>
                    <p>@submittedAnswers</p>
                </div>

            </div>
        </div>
    }
    else if (currentScreen.Equals("answerScreen"))
    {
        <div class="screen answer-screen">
            <div class="header host-top-bar">
                <p>Current Page: @pageTitle</p>
                <p>Question #: @currentQuestionNumber</p>
            </div>

            <div class="correct-answer-expanded">
                <p>@((MarkupString)formattedAnswer)</p>
            </div>




        @if (recievedScores)
        {
            <button @onclick="ShowScores">Show Scores</button>
        }
        </div>


    }
    else if (currentScreen.Equals("scoreScreen"))
    {
        <div class="screen score-screen">
            <div class="header host-top-bar">
                <p>Current Page: @pageTitle</p>
                <p>Question #: @currentQuestionNumber</p>
            </div>

            <div class="score-display">
                <h3>Scores</h3>
                @foreach (KeyValuePair<string, int> scorePair in playerScores)
                {
                    <ul>@scorePair.Key : @scorePair.Value</ul>

                }
            </div>

            <!-- If the game should be over, do not load another question, but instead prompt the final score -->
            @if (!WinConditionMet())
            {
                <button @onclick="SendQuestion">Next Question</button>
            }
            else
            {
                <button @onclick="ShowFinalScore">View Final Score</button>

            }
        </div>
    }
    else if (currentScreen.Equals("finalScoreScreen"))
    {
        <div class="join-screen final-score-screen">
            <h3>Final score</h3>
            @foreach (KeyValuePair<string, int> pair in playerScores)
            {
                <ol>@pair.Key : @pair.Value</ol>         

            }


            <button @onclick="resetLobby">Play Again</button>

        </div>
    }
    else
    {
        //this is only reached if there is an error    
        <h3> there has been an error </h3>
    
    }

}
else
{
    <span>Connecting. . . </span>

}

@code {
    private string httpAddress = "http://";
    private string qrCodePath = "images\\qrcode.png";
    private string currentScreen = "hostScreen";
    private HubConnection hubConnection;
    private bool joinedLobby = false;
    private List<string> players;
    private string? formattedQuestion;
    private string? formattedAnswer;
    private string? answer;
    private string? pageTitle;
    private bool endOnScore;
    private bool gameFinished = false;
    private int questionsPerPage = 10;
    private int scoreToWin = 10;
    private int totalQuestions = 20;
    private int currentQuestionNumber = 0;
    private int currentQuestionFromPage = 0;
    private int submittedAnswers = 0;
    private int numOfPlayers = 0;
    private int autoCountdownTime = 3;
    private List<KeyValuePair<string, int>>? playerScores;
    private bool recievedScores = false;
    private string wikipediaUrlLinks;


    protected override async Task OnInitializedAsync()
    {
        players = new();
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/playerhub"))
        .Build();






        hubConnection.On<string>("LobbyJoined", username =>
        {


            if (username.Equals("Could not resolve playerDataServices"))
                currentScreen = "Error";

            players.Add(username);
            numOfPlayers++;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("RecievePageTitle", pageTitle =>
        {
            this.pageTitle = pageTitle;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, string, int>("RecieveQuestionHost", (formattedQuestion, formattedAnswer, answer, sentenceIndex) =>
        {
            recievedScores = false;
            this.formattedQuestion = formattedQuestion;
            this.formattedAnswer = formattedAnswer;
            this.answer = answer;

            currentQuestionNumber++;

            submittedAnswers = 0;
            currentScreen = "questionScreen";
            InvokeAsync(StateHasChanged);

            hubConnection.SendAsync("SendQuestionContext", pageTitle, sentenceIndex);
        });

        hubConnection.On<string, string>("RecieveQuestionContext", (preceedingSentence, proceedingSentence) =>
        {
            string style = "text-decoration: underline;";
            this.formattedAnswer = preceedingSentence + formattedQuestion.Replace("________", $"<b style=\"{style}\">{answer}</b>") + proceedingSentence;

        });

        hubConnection.On<List<KeyValuePair<string, int>>>("RecieveScores", (playerScores) =>
        {
            //sorts scores so that the first displayed is the highest player's score
            this.playerScores = playerScores.OrderByDescending(kv => kv.Value).ToList();


            recievedScores = true;
            InvokeAsync(StateHasChanged);

        });

        hubConnection.On("UpdateClientAnswerCount", () =>
        {
            submittedAnswers++;
            if (submittedAnswers >= numOfPlayers)
                beginCountdownToNextQuestion();
            InvokeAsync(StateHasChanged);

        }        
        );

        hubConnection.On("ResetLobby", () =>
        {



        });

        hubConnection.On<string>("RecieveQRCode", (qrID) =>
        {
            qrCodePath = qrID;
            InvokeAsync(StateHasChanged);

        });


        //handles the event that the host is disconnection from the server
        hubConnection.Closed += async (error) =>
        {

        };




        await hubConnection.StartAsync();
        await hubConnection.SendAsync("DeclareHost");

        await hubConnection.SendAsync("SendPageTitle");
    }


    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    /// <summary>
    /// Changes current screen to display options for game setup.
    /// </summary>
    private async void OpenOptions()
    {
        currentScreen = "optionsScreen";
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Changes current screen to display current lobby and available players
    /// </summary>
    private async void ShowLobby()
    {
        currentScreen = "hostScreen";    
    }

    /// <summary>
    /// Sends a message to the server to signal the start of the game and allow clients to begin game-start protocol.
    /// </summary>
    private async void StartGame()
    {

        if (pageTitle != null)
            SendQuestion();
        else
            await hubConnection.SendAsync("SendPageTitle");

    }

    /// <summary>
    /// Requests question from the server. If the current question number being requested is greater than the number
    /// of questions set per page, a new wikipedia page will be requested first before requesting another question.
    /// </summary>
    private async void SendQuestion()
    {
        if (currentQuestionFromPage < questionsPerPage)
        {
            await hubConnection.SendAsync("SendQuestion", pageTitle);

            currentQuestionFromPage++;
        }
        else
        {
            await hubConnection.SendAsync("SendPageTitle");

            currentQuestionFromPage = 0;

            SendQuestion();
        }
    }

    private async void ShowAnswer()
    {
        await hubConnection.SendAsync("SendScores");
        currentScreen = "answerScreen";
        InvokeAsync(StateHasChanged);
    }

    private async void ShowScores()
    {
        currentScreen = "scoreScreen";
        InvokeAsync(StateHasChanged);
    }

    private async void ShowFinalScore()
    {
        await hubConnection.SendAsync("SendFinalScores");
        currentScreen = "finalScoreScreen";    

    }

    private bool WinConditionMet()
    {
        if (endOnScore)
        {
            if (this.playerScores.Count > 0)
            {
                //because we populate playerScores in sorted order, we only need to check the top player for the score win condition
                if (this.playerScores[0].Value > scoreToWin)
                    return true;
                else
                    return false;
            }
        }
        else
        {
            if (currentQuestionNumber >= totalQuestions)
                return true;
            else
                return false;
        }

        //this will really only be met if a score win condition is set but no players have joined yet
        return false;    
    }

    private string getBoldedAnswer(string formattedQuestion, string answer)
    {
        //&quot; is the escape character that allows us to write " within strings.
        //This lets us set the ID of our correct answer so that we can more easily apply CSS to this text
        return formattedQuestion.Replace("________", $"<b>{answer}</b>");
    }


    public async void resetLobby()
    {
        await hubConnection.SendAsync("ResetLobby");


    }

    private async void GenerateNewQRCode()
    {
        await hubConnection.SendAsync("GenerateQRCode", httpAddress);

    }

    private void beginCountdownToNextQuestion()
    {
        
    }

    
}

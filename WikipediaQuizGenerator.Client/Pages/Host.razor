@page "/host"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

@rendermode InteractiveWebAssembly

<h3>Host</h3>

@if (IsConnected)
{
    if (currentScreen.Equals("hostScreen"))
    {
        <button @onclick="StartGame">Start Game</button>

        foreach(string player in players)
        {
            <ul>@player</ul>
        }
    }
    else if (currentScreen.Equals("questionScreen"))
    {
        <p>@formattedQuestion</p>

        <button @onclick="ShowAnswer">Show Answer</button>
    }
    else if (currentScreen.Equals("answerScreen"))
    {
        <p>Correct Answer: @formattedAnswer</p>

        <button @onclick="ShowScores">Show Scores</button>
    }
    else if (currentScreen.Equals("scoreScreen"))
    {
        foreach (Tuple<string, int> scorePair in playerScores)
        {
            <ul>@scorePair.Item1 : @scorePair.Item2</ul>
        
        
        }

    }
    else if (currentScreen.Equals("finalScoreScreen"))
    {






    }
    else
    {
        //this is only reached if there is an error    
    
    }

}
else
{
    <span>Connecting. . . </span>

}

@code {
    private string currentScreen = "hostScreen";
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string username;
    private string userCountry;
    private bool joinedLobby = false;
    private List<string> players;
    private string formattedQuestion;
    private string formattedAnswer;
    private string pageTitle;
    private int questionsPerPage = 10;
    private List<Tuple<string, int>> playerScores;


    protected override async Task OnInitializedAsync()
    {
        players = new();
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/playerhub"))
        .Build();



        hubConnection.On<string>("LobbyJoined", username =>
        {
            if (username.Equals("Could not resolve playerDataServices"))
                currentScreen = "Error";

            players.Add(username);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("RecievePageTitle", pageTitle =>
        {
            this.pageTitle = pageTitle;
        });

        hubConnection.On<string, string, string>("RecieveQuestionHost", (formattedQuestion, formattedAnswer, answer) =>
        {
            this.formattedQuestion = formattedQuestion;
            this.formattedAnswer = formattedAnswer;


            currentScreen = "questionScreen";
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<List<Tuple<string, int>>>("RecieveScores", (playerScores) =>
        {
            this.playerScores = playerScores;
            if (currentScreen.Equals("scoreScreen"))
                InvokeAsync(StateHasChanged);



        });




        await hubConnection.StartAsync();
        await hubConnection.SendAsync("DeclareHost");
    }


    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;



    private async void StartGame()
    {
        await hubConnection.SendAsync("SendPageTitle");
        if (pageTitle != null)
            await hubConnection.SendAsync("SendQuestion", pageTitle);

    }

    private void ShowAnswer()
    {
        currentScreen = "answerScreen";
        InvokeAsync(StateHasChanged);
    }

    private void ShowScores()
    {
        currentScreen = "scoreScreen";
        InvokeAsync(StateHasChanged);

    }
}

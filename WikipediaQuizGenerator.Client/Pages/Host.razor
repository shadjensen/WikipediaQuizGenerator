@page "/host"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

@rendermode InteractiveWebAssembly

<h3>Host</h3>

@if (IsConnected)
{
    if (currentScreen.Equals("hostScreen"))
    {
        <h3></h3>
        if (pageTitle != null)
        {
            <button @onclick="StartGame">Start Game</button>
            <button @onclick="OpenOptions">Options</button>
        }
        foreach(string player in players)
        {
            <ul>@player</ul>
        }
    }
    else if (currentScreen.Equals("optionsScreen"))
    {
        <div>
            <p>End On Score: </p>
            <input type="checkbox" @bind="endOnScore" />
        </div>
        if (endOnScore)
        {
            <div>
                <p>Score To Win:</p>
                <input type="number" @bind="scoreToWin" />
            </div>
        }
        else
        {
            <div>
                <p>Number of Questions:</p>
                <input type="number" @bind="totalQuestions" />
            </div>
        }
        <div>
            <p>Questions Per Page:</p>
            <input type="number" @bind="questionsPerPage" />
        </div>

        <button @onclick="ShowLobby">Return to Lobby</button>
    }
    else if (currentScreen.Equals("questionScreen"))
    {
        <h3>Current Page: @pageTitle</h3>

        <p>@formattedQuestion</p>

        <button @onclick="ShowAnswer">Show Answer</button>
    }
    else if (currentScreen.Equals("answerScreen"))
    {
        <h3>Current Page: @pageTitle</h3>

        <p>Correct Answer: @formattedAnswer</p>

        if (recievedScores)
        {
            <button @onclick="ShowScores">Show Scores</button>
        }
    }
    else if (currentScreen.Equals("scoreScreen"))
    {
        <h3>Scores</h3>
        foreach (KeyValuePair<string, int> scorePair in playerScores)
        {
            <ul>@scorePair.Key : @scorePair.Value</ul>

        }

        <!-- If the game should be over, do not load another question, but instead prompt the final score -->
        if (!WinConditionMet())
        {
            <button @onclick="SendQuestion"> Next Question</button>
        }
        else
        {
            <button @onclick="ShowFinalScore"> View Final Score</button>


        }
    }
    else if (currentScreen.Equals("finalScoreScreen"))
    {
        <h3>Final score</h3>
        foreach (KeyValuePair<string, int> pair in playerScores)
        {
            <ol>@pair.Key : @pair.Value</ol>         

        }





    }
    else
    {
        //this is only reached if there is an error    
        <h3> there has been an error </h3>
    
    }

}
else
{
    <span>Connecting. . . </span>

}

@code {
    private string currentScreen = "hostScreen";
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string username;
    private string userCountry;
    private bool joinedLobby = false;
    private List<string> players;
    private string formattedQuestion;
    private string formattedAnswer;
    private string pageTitle;
    private bool endOnScore;
    private bool gameFinished = false;
    private int questionsPerPage = 10;
    private int scoreToWin = 10;
    private int totalQuestions = 20;
    private int currentQuestionNumber = 0;
    private int currentQuestionFromPage = 0;
    private List<KeyValuePair<string, int>> playerScores;
    private bool recievedScores = false;


    protected override async Task OnInitializedAsync()
    {
        players = new();
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/playerhub"))
        .Build();



        hubConnection.On<string>("LobbyJoined", username =>
        {
            if (username.Equals("Could not resolve playerDataServices"))
                currentScreen = "Error";

            players.Add(username);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("RecievePageTitle", pageTitle =>
        {
            this.pageTitle = pageTitle;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, string>("RecieveQuestionHost", (formattedQuestion, formattedAnswer, answer) =>
        {
            recievedScores = false;
            this.formattedQuestion = formattedQuestion;
            this.formattedAnswer = formattedAnswer;


            currentScreen = "questionScreen";
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<List<KeyValuePair<string, int>>>("RecieveScores", (playerScores) =>
        {
            //sorts scores so that the first displayed is the highest player's score
            this.playerScores = playerScores.OrderByDescending(kv => kv.Value).ToList();


            recievedScores = true;
            currentQuestionNumber++;
            InvokeAsync(StateHasChanged);



        });




        await hubConnection.StartAsync();
        await hubConnection.SendAsync("DeclareHost");

        await hubConnection.SendAsync("SendPageTitle");
    }


    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private async void OpenOptions()
    {
        currentScreen = "optionsScreen";
        InvokeAsync(StateHasChanged);

    }
    private async void ShowLobby()
    {
        currentScreen = "hostScreen";    
    }

    private async void StartGame()
    {

        if (pageTitle != null)
            SendQuestion();
        else
            await hubConnection.SendAsync("SendPageTitle");

    }

    private async void SendQuestion()
    {
        if (currentQuestionFromPage < 10)
        {
            await hubConnection.SendAsync("SendQuestion", pageTitle);

            currentQuestionFromPage++;
        }
        else
        {
            await hubConnection.SendAsync("SendPageTitle");

            currentQuestionFromPage = 0;

            SendQuestion();
        }
    }

    private async void ShowAnswer()
    {
        await hubConnection.SendAsync("SendScores");
        currentScreen = "answerScreen";
        InvokeAsync(StateHasChanged);
    }

    private async void ShowScores()
    {
        currentScreen = "scoreScreen";
        InvokeAsync(StateHasChanged);
    }

    private async void ShowFinalScore()
    {
        await hubConnection.SendAsync("SendFinalScores");
        currentScreen = "finalScoreScreen";    

    }

    private bool WinConditionMet()
    {
        if (endOnScore)
        {
            if (this.playerScores.Count > 0)
            {
                //because we populate playerScores in sorted order, we only need to check the top player for the score win condition
                if (this.playerScores[0].Value > scoreToWin)
                    return true;
                else
                    return false;
            }
        }
        else
        {
            if (currentQuestionNumber >= totalQuestions)
                return true;
            else
                return false;
        }

        //this will really only be met if a score win condition is set but no players have joined yet
        return false;    
    }

}

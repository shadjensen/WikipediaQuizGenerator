@page "/host"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

@rendermode InteractiveWebAssembly

<h3>Host</h3>

@if (IsConnected)
{
    if (currentScreen.Equals("hostScreen"))
    {
        <button @onclick="StartGame">Start Game</button>

        foreach(string player in players)
        {
            <ul>@player</ul>
        }
    }
    else if (currentScreen.Equals("questionScreen"))
    {



    }
    else if (currentScreen.Equals("answerScreen"))
    {



    }
    else if (currentScreen.Equals("scoreScreen"))
    {


    }
    else if (currentScreen.Equals("finalScoreScreen"))
    {






    }
    else
    {
        //this is only reached if there is an error    
    
    }

}
else
{
    <span>Connecting. . . </span>

}

@code {
    private string currentScreen = "hostScreen";
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string username;
    private string userCountry;
    private bool joinedLobby = false;
    private List<string> players;

    protected override async Task OnInitializedAsync()
    {
        players = new();
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/playerhub"))
        .Build();



        hubConnection.On<string>("LobbyJoined", username =>
        {
            if (username.Equals("Could not resolve playerDataServices"))
                currentScreen = "Error";

            players.Add(username);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string, string>("RecieveQuestionHost", (formattedSentence, pagename) =>
        {



        });

        

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("DeclareHost");
    }


    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;



    private void StartGame()
    {



    }

    private async void GetQuestion(string formattedSentence, string pagename)
    {
        
    }
}

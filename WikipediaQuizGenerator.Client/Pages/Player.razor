@page "/player"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

@rendermode InteractiveWebAssembly

<h3>@username</h3>
<div class="background-gradient"></div>

@if (IsConnected)
{

    @if (currentScreen.Equals("joinScreen") || joinedLobby == false)
    {
        <div class="join-screen">
            <input type="text" @bind="username" />
            <input type="text" @bind="userCountry" />
            <button @onclick="JoinLobby">Send</button>

            @if (!foundHost)
            {
                <p>Could not join lobby as there was no found host</p>    
            
            }

        </div>
    }
    else if (currentScreen.Equals("waitScreen"))
    {
            <p>waiting for game to begin</p>

            <!-- https://giphy.com/stickers/molangofficialpage-kawaii-molang-piupiu-OFvzv065oT5HP5lquy -->

        
    }
    else if (currentScreen.Equals("playScreen"))
    {
        
        <div class="playScreen">
            <div class="play-top-bar">
                <p>@username</p>
                <p>Score: @playerScore</p>
            </div>

            @if (!keywordIsSelected)
            {
                <div class="keyword-button-container">
                    
                    @foreach(string keyword in keywords)
                    {
                        <button @onclick="( () => selectKeyword(keyword) )">@capitalizeFirstCharacter(keyword)</button>
                    }
                </div>
            }
            else
            {
                <p> Waiting for other responses...</p>
            
            
            }
        </div>
    }
    else if (currentScreen.Equals("scoreScreen"))
    {
        <div class="play-top-bar">
            <p>@username</p>
            <p>Score: @playerScore</p>
        </div>

        @if (answerSubmitted)
        {
            @if(answerCorrect)
            {
                <h3>@correctMessages[random.Next(correctMessages.Length)]</h3>

                <!-- https://giphy.com/stickers/molangofficialpage-kawaii-molang-piupiu-WVqnJcExQS8QzcCrup -->
            }
            else
            {
                <h3>@incorrectMessages[random.Next(incorrectMessages.Length)]</h3>

                <!-- https://giphy.com/stickers/molangofficialpage-kawaii-molang-piupiu-JbgeKJ1k25J41VeupQ -->
            }
        }
        else
        {
            <h3>@noAnswerMessages[random.Next(noAnswerMessages.Length)]</h3>

            <!-- https://giphy.com/stickers/molangofficialpage-kawaii-molang-piupiu-JbgeKJ1k25J41VeupQ -->
        
        }
        <p>Current score = @playerScore</p>

    }
    else if (currentScreen.Equals("finalScoreScreen"))
    {
        
        <p>Congratulations you placed @generatePlacing(playerPlacing)</p>

        <buton @onclick="resetToStart">Play Again?</buton>
    }
    else
    {
        //this is only reached if an error has occured    
    
    
    }

}
else
{
    <span>Connecting. . . </span>

}

@code {
    private string currentScreen = "joinScreen";
    private HubConnection hubConnection;
    private string username;
    private string userCountry;
    private bool joinedLobby = false;
    private bool foundHost = true;
    private bool answerCorrect = false;
    private bool keywordIsSelected = false;
    private bool answerSubmitted = false;
    private Random random;
    private int playerScore;
    private int playerPlacing;
    private string correctAnswer;

    private string[]? keywords;
    private string[]? correctMessages;
    private string[]? incorrectMessages;
    private string[]? noAnswerMessages;


    protected override async Task OnInitializedAsync()
    {
        username = "";
        random = new Random();
        keywords = new string[8];
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/playerhub"))
        .Build();

        defineResponses();

        hubConnection.On<string>("LobbyJoined", username =>
        {
            if (username.Equals("Could not resolve playerDataServices"))
                currentScreen = "Error";

            joinedLobby = true;
            foundHost = true;
            currentScreen = "waitScreen";
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("NoLobbyHost", username =>
        {
            if (username.Equals("Could not resolve playerDataServices"))
                currentScreen = "Error";

            joinedLobby = false;
            foundHost = false;
            InvokeAsync(StateHasChanged);
        });



        hubConnection.On<string[], string>("RecieveQuestionClient", (answers, correctAnswer) =>
        {
            answerSubmitted = false;
            keywordIsSelected = false;
            this.correctAnswer = correctAnswer;
            List<int> options = new();

            for (int i = 0; i < answers.Length; i++)
            {
                keywords[i] = answers[i];             
            }

            keywords = keywords.OrderBy(x => random.Next()).ToArray();


            currentScreen = "playScreen";
            InvokeAsync(StateHasChanged);

        });

        hubConnection.On<bool, int>("RecieveClientScore", (answerCorrect, updatedScore) => 
        {
            this.answerCorrect = answerCorrect;
            playerScore = updatedScore;


        });

        hubConnection.On<string>("ShowClientScores", cancellationToken=> 
        {
            currentScreen = "scoreScreen";
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<KeyValuePair<string, int>>>("ShowClientFinalScore", (playerScores) =>
        {
            playerPlacing = 0;
            for (int i = 0; i < playerScores.Count; i++)
            {
                if (playerScores[i].Key.Equals(username))
                {
                    //if the player is in 3rd place, it will appear in index 2 of the list so we must add 1 to account for this.
                    playerPlacing = i + 1;    

                }


            }

            if (playerPlacing > 0)
                playerScore = playerScores[playerPlacing - 1].Value;

            currentScreen = "finalScoreScreen";
            InvokeAsync(StateHasChanged);
        });

        //handles the event that the client is disconnection from the server
        hubConnection.Closed += async (error) =>
        {

        };


        await hubConnection.StartAsync();


    }

    Task Send() => hubConnection.SendAsync("JoinLobby", username, userCountry);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private void JoinLobby()
    {
        hubConnection.SendAsync("JoinLobby", username, userCountry);
    }

    private void selectKeyword(string selectedWord)
    {
        answerSubmitted = true;
        keywordIsSelected = true;
        hubConnection.SendAsync("SendAnswer", username, selectedWord);
        InvokeAsync(StateHasChanged);
    }


    private string generatePlacing(int placing)
    {
        if (placing == 0)
            return "0th";
        if ((placing % 10) == 1)
            return placing + "st";
        if ((placing % 10) == 2)
            return placing + "nd";
        if ((placing % 10) == 3)
            return placing + "rd";
        return placing + "th";   

    }

    private string capitalizeFirstCharacter(string word)
    {
        if (word == null || word.Equals(""))
            return "";
        else if (word.Length == 1)
            return char.ToUpper(word[0]).ToString();

        return char.ToUpper(word[0]) + word.Substring(1);
    }

    private void resetToStart()
    {
        
    
    }


    private void defineResponses()
    {
    correctMessages = new string[] { "Congratulations, you're officially the trivia champ! Time to update that resume.",
                                     "You're crushing it! I'd ask for your autograph, but I left my pen in the quiz locker.",
                                     "Well, look at you, Einstein! Next stop: solving the mysteries of the universe.",
                                     "Who's the trivia genius? You are! Prepare for the paparazzi, they'll want a piece of this!",
                                     "You've got more answers than Google! Impressive!",
                                     "Bravo! You've just earned your Ph.D. in Trivia-ology.",
                                     "You're on fire! Quick, someone call the trivia extinguisher!",
                                     "You're like a walking encyclopedia, but way more fun!",
                                     "You're like a trivia superhero, swooping in with the correct answer!",
                                     "By the power of Grayskull! You've unlocked the right answer!"};

    incorrectMessages = new string[] {"Oops! That's not quite it, but hey, even Einstein had off days!",
                                      "Close, but no cigar! Don't worry, even the best stumble now and then.",
                                      "Not quite! But don't give up, you're just one step closer to becoming a trivia master!",
                                      "Whoops-a-daisy! That answer's as elusive as Bigfoot!",
                                      "Not quite the jackpot! But hey, you're still a winner in our book!",
                                      "Oopsie-doodle! That answer's like trying to find a needle in a haystack.",
                                      "Missed it by a hair! But fear not, the next question is yours to conquer!",
                                      "Almost there! Keep swinging, you're bound to hit a home run soon!",
                                      "Not the droid we were looking for! But hey, R2-D2 approves of your effort!",
                                      "Uh-oh, that answer's as elusive as Waldo in a crowd! Keep searching!"};

    noAnswerMessages = new string[] {"Alas, poor answer! It missed its cue. Onward to the next scene!",
                                     "The answer that never was, like a ghost in Hamlet's castle! Next question, our stage awaits!",
                                     "No answer? Must be caught in a Kafkaesque labyrinth! Next question, let's find our way out!",
                                     "The answer's playing hide and seek, channeling its inner Gatsby! Next question, let's uncover the mystery!",
                                     "Answer lost in Wonderland, chasing rabbits! Next question, let's follow the white rabbit to victory!",
                                     "No answer? Sounds like a tale from the Canterbury Trails! Next question, our pilgrimage continues!",
                                     "The answer's on a quest, like Don Quixote chasing windmills! Next question, our adventure awaits!",
                                     "No answer, like a page torn from the Odyssey! Fear not, our epic journey continues with the next question!",
                                     "The answer's a whisper in the breeze, like Poe's raven! Next question, let's heed the call!",
                                     "Answer adrift in the sea of time, like Captain Ahab's white whale! Next question, our hunt continues!"};         
    }


   


}
